name: Deploy
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  build-and-push-to-ecr:
   
  
    name: Build Docker Image
    runs-on: ubuntu-latest  
    steps:  
        # This step uses GitHub Actions' checkout action to check out your repository so your workflow can access it during the GitHub Actions workflow execution
        - name: Checkout
          uses: actions/checkout@v2    
          
        # This step uses the AWS CLI to configure AWS credentials so the workflow can interact with AWS services in subsequent steps 
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}


        # This step uses the AWS CLI to login to AWS ECR and enable access to your ECR repositories during the workflow execution
        - name: Log into AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v1
          

        # This step uses the AWS CLI to build and push the Docker image to AWS ECR
        - name: Build and Push Docker Image to ECR
          # This sets up the environment variables
          env:
            # This is set to the output from the login-aws-ecr step, specifically the registry value. This is the URI of the ECR registry that you're pushing to.
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            # This is set to the value of the AWS_ECR_REPO secret, which is presumably the name of the ECR repository that you're pushing to.
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            # This is set to latest, which is a common tag for Docker images. It typically refers to the most recently built version of an image.
            IMAGE_TAG: latest
          # This contains the Docker commands to build the Docker image using the specified tag and push it to the AWS ECR repository
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
       
  